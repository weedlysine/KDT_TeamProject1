<?xml version="1.0"?>
<doc>
    <assembly>
        <name>H264RTSPPlayerLib</name>
    </assembly>
    <members>
        <member name="T:Vizario.RTSPClient">
            <summary>
            This is a copy of the original RTSPClient example found in the
            https://github.com/belveder79/SharpRTSP fork with minor modifications
            to enable verbose output and to fix port allocation issues on Android
            only. Check the original version from https://github.com/ngraziano/SharpRTSP
            and redirect change requests concerning the basic functionaly there.
            </summary>
        </member>
        <member name="T:Vizario.RTSPClient.Received_SPS_PPS_Delegate">
            <summary>
            Delegate receiving SPS and PPS packets for H264 stream.
            </summary>
        </member>
        <member name="T:Vizario.RTSPClient.Received_VPS_SPS_PPS_Delegate">
            <summary>
            Delegate receiving VPS, SPS and PPS packets for H265 stream.
            </summary>
        </member>
        <member name="T:Vizario.RTSPClient.Received_NALs_Delegate">
            <summary>
            Delegate receiving NAL units for H264 or H264 stream.
            </summary>
        </member>
        <member name="T:Vizario.RTSPClient.Received_G711_Delegate">
            <summary>
            Delegate receiving G711 packets
            </summary>
        </member>
        <member name="T:Vizario.RTSPClient.Received_AMR_Delegate">
            <summary>
            Delegate receiving AMR packets
            </summary>
        </member>
        <member name="T:Vizario.RTSPClient.Received_AAC_Delegate">
            <summary>
            Delegate receiving AAC packets with stripped ADTS headers
            </summary>
        </member>
        <member name="M:Vizario.RTSPClient.#ctor(System.Boolean)">
            <summary>
            Create an RTSPClient with optional console logging
            </summary>
            <param name="enableLoggingToConsole">Boolean parameter to enable console logging for debugging (defaults to false).</param>
        </member>
        <member name="M:Vizario.RTSPClient.Connect(System.String,Vizario.RTSPClient.RTP_TRANSPORT,System.String@,Vizario.RTSPClient.MEDIA_REQUEST)">
            <summary>
            Connect an existing RTSPClient based on a given URL and transport settings.
            </summary>
            <param name="url">Full URL including port and channel to connect to (e.g. rtsp://192.168.20.13:8554/live).</param>
            <param name="rtp_transport">Transport type, either UDP, TCP or Multicast - depends on server support and bandwidth</param>
            <param name="media_request">Type of media requested, Audio, Video or both (defaults to VIDEO_AND_AUDIO).</param>
        </member>
        <member name="M:Vizario.RTSPClient.StreamingFinished">
            <summary>
            Function to check streaming activity.
            </summary>
            <returns>
            true if this connection failed, or if it connected but is no longer connected.
            </returns>
        </member>
        <member name="M:Vizario.RTSPClient.Pause">
            <summary>
            Function to pause streaming.
            </summary>
        </member>
        <member name="M:Vizario.RTSPClient.Play">
            <summary>
            Function to start playing.
            </summary>
        </member>
        <member name="M:Vizario.RTSPClient.Stop">
            <summary>
            Function to stop streaming.
            </summary>
        </member>
        <member name="T:Vizario.H264DecoderLib.COLORSPACE">
            <summary>
            definition of some color spaces
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.COLORSPACE.RGB24">
            <summary>
            24-bit RGB format (not supported)
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.COLORSPACE.RGBA32">
            <summary>
            R/B reverse colorspace for decoder (not used usually)
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.COLORSPACE.BGRA32">
            <summary>
            default colorspace for decoder
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.COLORSPACE.UNKNOWN">
            <summary>
            denotes invalid colorspace
            </summary>
        </member>
        <member name="T:Vizario.H264DecoderLib.DECODERCOLORFORMAT">
            <summary>
            definition of some color spaces; only for buggy Android decoders
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.DECODERCOLORFORMAT.YUV420P">
            <summary>
            Planar YUV format corresponding to COLOR_FormatYUV420Planar on Android
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.DECODERCOLORFORMAT.YUV420SP">
            <summary>
            Semi-Planar YUV format corresponding to COLOR_FormatYUV420SemiPlanar on Android
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.DECODERCOLORFORMAT.UNKNOWN">
            <summary>
            Default to unknown, resulting it to be ignored
            </summary>
        </member>
        <member name="T:Vizario.H264DecoderLib.H264Decoder">
            <summary>
            Decoder input for playing back H264 video stream.
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_hasCallback">
            Internal flag telling that a callback was registered...
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_callback">
            Callback received once the stream was successfully decoded to set up a target texture
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_initFine">
            internal flag that init was fine
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_sourceArray">
            internal native array for source buffer
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_unmanagedSourceBuffer">
            internal buffer for encoder input
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_sourceBufferSize">
            internal record for memory size (to not recompute every time anew)
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_running">
            
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_decoderId">
            internal record of the decoder ID
        </member>
        <member name="T:Vizario.H264DecoderLib.H264Decoder.InternalCallbackHelper">
            <summary>
            internal class to hold callback later called from static method
            </summary>
        </member>
        <member name="T:Vizario.H264DecoderLib.H264Decoder.TextureInfo">
            <summary>
            Class holding information about the target texture
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.TextureInfo.width">
            Width or texture.
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.TextureInfo.height">
            Height or texture.
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.TextureInfo.format">
            Texture format info from decoder after decoding.
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.TextureInfo.formatX">
            Texture format info from decoder before decoding.
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.TextureInfo.linear">
            Linear Color Space.
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.TextureInfo.mipMap">
            Using Mipmapping.
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.TextureInfo.formatstring">
            String from decoder as JSON.
        </member>
        <member name="T:Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration">
            <summary>
            Class holding information about the configuration
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration.isH265">
            <summary>
            Indicates that we are about to receive HAVC/H265 or H264
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration.enforcedColorFormat">
            <summary>
            Enforce a particular decoder format for Android buggy Decoders. Considered only on Android and ignored on all other platforms!
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration.videoDelayTimeInMs">
            <summary>
            This is unused right now.
            </summary>
        </member>
        <member name="T:Vizario.H264DecoderLib.H264Decoder.StreamFormatChangedNotifyCallback">
            <summary>
            Delegate to forward the retrieved texture info to the main script
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_streamFormatChangedNotifyCallback">
            <summary>
            Delegate to forward the retrieved texture info
            </summary>
        </member>
        <member name="T:Vizario.H264DecoderLib.H264Decoder.UpdateFPSText">
            <summary>
            Delegate to update a text label based on FPS
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_updateFpsText">
            <summary>
            Delegate to update a text label;
            </summary>
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_frameTexture">
            Texture to write to
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_renderer">
            Renderer to use for showing the texture
        </member>
        <member name="F:Vizario.H264DecoderLib.H264Decoder.m_spriteholder">
            Gameobject to hold the sprite
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.SetupRenderTexture(System.Int32,System.Int32)">
            <summary>
            private function to create a new 2D texture for rendering and passing the info back to the decoder;
            </summary>
            <param name="width_">Width of the texture to create</param>
            <param name="height_">Height of the texture to create</param>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.UpdateRenderer(UnityEngine.Texture2D,System.Int32)">
            <summary>
            private function to set the texture to the mesh renderer material;
            </summary>
            <param name="tex">Texture to be set as material for the renderer</param>
            <param name="frameID">Frame ID (unused)</param>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.FormatChangedNotify(System.String)">
            <summary>
            private function to set up entire texture and renderer setup
            </summary>
            <param name="msg">JSON string containing texture information to set up rest of pipeline</param>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.Init(System.Byte,System.Boolean@,Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration)">
            <summary>
            private function to initialize everything
            </summary>
            <param name="decoderId">Decoder ID for unique identification of engine.</param>
            <param name="success">Output variable indicating success or failure.</param>
            <param name="config">Optional Decoderconfiguration passed to engine. Will use standard settings if not provided.</param>
            <seealso cref="T:Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration"/>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.#ctor(System.Byte,UnityEngine.Renderer,System.Boolean@,Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration)">
            <summary>
            Create a H264 decoder
            </summary>
            <param name="decoderId">Unique decoder ID.</param>
            <param name="renderer">Renderer responsible for showing the texture to be rendered.</param>
            <param name="success">Output parameter to indicate success or failure of operation</param>
            <param name="config">Set particular properties on the decoder (if null, default values apply).</param>
            <seealso cref="T:Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration"/>
            <seealso cref="T:Vizario.H264DecoderLib.DECODERCOLORFORMAT"/>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.#ctor(System.Byte,UnityEngine.GameObject,System.Boolean@,Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration)">
            <summary>
            Create a H264 decoder
            </summary>
            <param name="decoderId">Unique decoder ID.</param>
            <param name="spriteHolder">Gameobject holding the Sprite to be created and rendered</param>
            <param name="success">Output parameter to indicate success or failure of operation</param>
            <param name="config">Set particular properties on the decoder (if null, default values apply).</param>
            <seealso cref="T:Vizario.H264DecoderLib.H264Decoder.DecoderConfiguration"/>
            <seealso cref="T:Vizario.H264DecoderLib.DECODERCOLORFORMAT"/>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.ResetRenderTexture">
            <summary>
            private function to reset renderer pipeline;
            </summary>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.RegisterCallback(Vizario.H264DecoderLib.H264Decoder.StreamFormatChangedCallback,System.Boolean)">
            <summary>
            Register a callback to retrieve frame changed information
            </summary>
            <returns>
            true on success, false if otherwise
            </returns>
            <param name="callback">StreamFormatChanged function called once decompression finished for the first time and stream properties are known.</param>
            <param name="forwarding">Indicates if the callback is to forward data to another module on C++ level (defaults to false).</param>
            <seealso cref="T:Vizario.H264DecoderLib.H264Decoder.StreamFormatChangedCallback"/>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.InternalCallbackDelegate(System.String)">
            <summary>
            Internal Callback to handle information received from c++.
            </summary>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.GetInputBuffer(Unity.Collections.NativeArray{System.Byte}@,System.UInt32@)">
            <summary>
            Get buffers for decoder to be filled externally
            </summary>
            <returns>
            true on success with valid out parameters, false if otherwise
            </returns>
            <param name="inputArray">Output parameter to retrieve buffer for writing into it.</param>
            <param name="inputArraySize">Output parameter indicating buffer size.</param>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.CommitFrame(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Signal that the source array has been filled with data externally
            </summary>
            <returns>
            true if Decoder accepted it, false if otherwise
            </returns>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.Dispose">
            <summary>
            Stop H264 decoder and release resources.
            </summary>
        </member>
        <member name="M:Vizario.H264DecoderLib.H264Decoder.HandleUpdate">
            <summary>
            function to be called on the main thread to trigger rendering;
            </summary>
        </member>
        <member name="T:Vizario.H264DecoderLib.H264Decoder.StreamFormatChangedCallback">
            <summary>
            Delegate definition for retrieving stream property information from c++ level.
            </summary>
            <param name="msg">JSON string from c++ level to let Unity know the stream properties on first successful decompression.</param>
        </member>
        <member name="T:Vizario.AACDecoderLib.AACDecoder">
            <summary>
            Input for playing back an AAC audio stream.
            </summary>
        </member>
        <member name="F:Vizario.AACDecoderLib.AACDecoder.m_hasCallback">
            Internal flag telling that a callback was registered...
        </member>
        <member name="F:Vizario.AACDecoderLib.AACDecoder.m_callback">
            Internal callback that the format of the stream has changed (not used)
        </member>
        <member name="F:Vizario.AACDecoderLib.AACDecoder.m_initFine">
            internal flag that init was fine
        </member>
        <member name="F:Vizario.AACDecoderLib.AACDecoder.m_sourceArray">
            internal native array for source buffer
        </member>
        <member name="F:Vizario.AACDecoderLib.AACDecoder.m_unmanagedSourceBuffer">
            internal buffer for decoder input
        </member>
        <member name="F:Vizario.AACDecoderLib.AACDecoder.m_sourceBufferSize">
            internal record for memory size (to not recompute every time anew)
        </member>
        <member name="F:Vizario.AACDecoderLib.AACDecoder.m_running">
            decoder instance running indicator
        </member>
        <member name="F:Vizario.AACDecoderLib.AACDecoder.m_decoderId">
            internal record of the decoder ID
        </member>
        <member name="T:Vizario.AACDecoderLib.AACDecoder.InternalCallbackHelper">
            <summary>
            internal class to hold callback later called from static method
            </summary>
        </member>
        <member name="M:Vizario.AACDecoderLib.AACDecoder.FormatChangedNotify(System.String)">
            <summary>
            private function to set up eventual Unity processes (UNUSED)
            </summary>
            <param name="msg">JSON string containing information to set up rest of pipeline</param>
        </member>
        <member name="M:Vizario.AACDecoderLib.AACDecoder.#ctor(System.Byte,System.Boolean@)">
            <summary>
            Create an AAC decoder
            </summary>
            <param name="decoderId">Unique decoder ID.</param>
            <param name="success">Output parameter to indicate success or failure of operation</param>
        </member>
        <member name="M:Vizario.AACDecoderLib.AACDecoder.RegisterCallback(Vizario.AACDecoderLib.AACDecoder.StreamFormatChangedCallback,System.Boolean)">
            <summary>
            Register a callback to retrieve format changed information.
            This function is a place holder for any future modifications and is not used normally.
            </summary>
            <returns>
            true on success, false if otherwise
            </returns>
            <param name="callback">ForwardDataCallback function called in case something changed.</param>
            <param name="forwarding">Indicates if the callback is to forward data to another module on C++ level (defaults to false).</param>
            <seealso cref="T:Vizario.AACDecoderLib.AACDecoder.StreamFormatChangedCallback"/>
        </member>
        <member name="M:Vizario.AACDecoderLib.AACDecoder.InternalCallbackDelegate(System.String)">
            <summary>
            Internal Callback to handle information received from c++
            </summary>
        </member>
        <member name="M:Vizario.AACDecoderLib.AACDecoder.GetInputBuffer(Unity.Collections.NativeArray{System.Byte}@,System.UInt32@)">
            <summary>
            Get buffers for decoder to be filled externally
            </summary>
            <returns>
            true on success with valid out parameters, false if otherwise
            </returns>
            <param name="inputArray">Output parameter to retrieve buffer for writing into it.</param>
            <param name="inputArraySize">Output parameter indicating buffer size.</param>
        </member>
        <member name="M:Vizario.AACDecoderLib.AACDecoder.CommitFrame(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Signal that the source array has been filled with data externally
            </summary>
            <returns>
            true if Decoder accepted it, false if otherwise
            </returns>
        </member>
        <member name="M:Vizario.AACDecoderLib.AACDecoder.Dispose">
            <summary>
            Stop AAC decoder and release resources.
            </summary>
        </member>
        <member name="M:Vizario.AACDecoderLib.AACDecoder.HandleUpdate">
            <summary>
            function to be called on the main thread to trigger playback (not used yet);
            </summary>
        </member>
        <member name="T:Vizario.AACDecoderLib.AACDecoder.StreamFormatChangedCallback">
            <summary>
            Delegate definition for retrieving stream property information from c++ level (UNUSED)
            </summary>
            <param name="msg">JSON string from c++ level to let Unity know the stream properties on first successful decompression.</param>
        </member>
        <member name="T:Vizario.H264AACBridge">
            <summary>
            Bridge to handle update for Decoders
            </summary>
        </member>
        <member name="F:Vizario.H264AACBridge.m_video_pts">
            Internal video and audio presentation times...
        </member>
        <member name="M:Vizario.H264AACBridge.#ctor(System.Boolean)">
            <summary>
            Bridge Constructor
            </summary>
            <param name="buffering">Enable buffering mode (defaults to false)</param>
        </member>
        <member name="M:Vizario.H264AACBridge.Dispose">
            <summary>
            Stop Bridge and release resources.
            </summary>
        </member>
        <member name="M:Vizario.H264AACBridge.Received_VPS_SPS_PPS(System.Byte[],System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Function to pass received VPS/SPS/PPS NAL units to decoder (H265 only).
            </summary>
            <param name="vps"></param> 
            <param name="sps"></param>
            <param name="pps"></param>
            <param name="rtp_timestamp">Received Presentation Timestamp from RTSP.</param>
        </member>
        <member name="M:Vizario.H264AACBridge.Received_SPS_PPS(System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Function to pass received SPS/PPS NAL units to decoder.
            </summary>
            <param name="sps"></param>
            <param name="pps"></param>
            <param name="rtp_timestamp">Received Presentation Timestamp from RTSP.</param>
        </member>
        <member name="M:Vizario.H264AACBridge.Received_NALs(System.Collections.Generic.List{System.Byte[]},System.UInt32)">
            <summary>
            Function to pass received NAL units to decoder.
            </summary>
            <param name="nal_units"></param>
            <param name="rtp_timestamp">Received Presentation Timestamp from RTSP.</param>
        </member>
        <member name="M:Vizario.H264AACBridge.Received_AAC(System.String,System.Collections.Generic.List{System.Byte[]},System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Function to pass received AAC data to decoder.
            </summary>
            <param name="format"></param>
            <param name="aac_units"></param>
            <param name="ObjectType"></param>
            <param name="FrequencyIndex"></param>
            <param name="ChannelConfiguration"></param>
            <param name="rtp_timestamp">Received Presentation Timestamp from RTSP.</param>        
        </member>
        <member name="M:Vizario.H264AACBridge.StartBridge(Vizario.H264DecoderLib.H264Decoder,Vizario.AACDecoderLib.AACDecoder,System.String,System.String)">
            <summary>
            Function to start bridge.
            </summary>
            <param name="h264decoder">H264Decoder instance.</param>
            <param name="aacdecoder">AACDecoder instance (defaults to null).</param>
            <param name="h264file">File to write received H264/H265 packets to (defaults to null).</param>
            <param name="aacfile"> File to write received AAC packets to (defaults to null).</param>
        </member>
        <member name="M:Vizario.H264AACBridge.StopBridge">
            <summary>
            Function to stop the bridge and dispose resources.
            </summary>
        </member>
        <member name="M:Vizario.H264AACBridge.FixedTimeUpdate(System.Double)">
            <summary>
            Function to be called from FixedTimeUpdate for RTSP mode.
            </summary>
            <param name="now">Current time as double.</param> 
        </member>
        <member name="M:Vizario.H264AACBridge.FixedTimeUpdateLocal(System.Double,Vizario.H264DecoderLib.Utils.RawH264FileReader,Vizario.H264DecoderLib.Utils.RawAACFileReader)">
            <summary>
            Function to be called from FixedTimeUpdate for LOCAL mode.
            </summary>
            <param name="now">Current time as double.</param>
            <param name="rawh264datareader">H264 packet reader instance.</param>
            <param name="rawaacdatareader">AAC packet reader instance.</param>
        </member>
    </members>
</doc>
